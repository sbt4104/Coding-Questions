/*
Given a word, write a function to generate all of its unique generalized abbreviations.

Generalized abbreviation of a word can be generated by replacing each substring of the word by the count of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. After replacing these substrings in the actual word by the count of characters we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
*/
#include<bits/stdc++.h>
using namespace std;

class uniqueAbbreaviations{
    public:
    static vector<string> generateUniqueAbbr(string input) {
        vector<string> ans;
        queue<string> queue;
        queue.push("");
        for(int index=0; index<input.length(); index++) {
            char curr = input[index];
            int size=queue.size();
            while(size--) {
                string currStr=queue.front();
                queue.pop();
                index+1==input.length()? ans.push_back(currStr+curr): queue.push(currStr+curr);

                if(currStr[currStr.length()-1]<='9' && currStr[currStr.length()-1] >='0') {
                    int count=currStr[currStr.length()-1]-'0';
                    count++;
                    char temp='0' + count;
                    currStr=currStr.substr(0, currStr.length()-1) + temp;
                    index+1==input.length()? ans.push_back(currStr) : queue.push(currStr);
                } else {
                    index+1==input.length()? ans.push_back(currStr+'1') : queue.push(currStr+'1');
                }
            }
        }
        return ans;
    }
};

int main() {
    vector<string> ans=uniqueAbbreaviations::generateUniqueAbbr("code");
    for(auto str: ans) {
        cout<<str<<endl;
    }
    return 0;
}